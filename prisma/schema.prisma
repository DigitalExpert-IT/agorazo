// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  verifyToken   String?         @unique
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  Transaction   Transaction[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  passwordResets PasswordReset[] @relation("UserToPasswordReset")
  Withdraw       Withdraw[]
}

model PendingUser {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  verifyToken String   @unique
  expires     DateTime
  createdAt   DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordReset {
  id         String   @id @default(uuid())
  userId     String
  resetToken String   @unique(map: "Unique_ResetToken")
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  user User @relation("UserToPasswordReset", fields: [userId], references: [id])

  @@index([resetToken], map: "Index_ResetToken")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Transaction {
  id         String   @id @default(cuid())
  userId     String
  txnId      String
  value      Int
  valueToken Float
  type       String
  status     String
  reference  String
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Withdraw {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  status    String
  eventLog  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
